require('dotenv').config();

const { Bot, GrammyError, HttpError } = require('grammy');

const bot = new Bot (process.env.BOT_API_KEY);

// –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π
bot.catch((err) => { const ctx = err.ctx;
    console.error(`Error while handling update ${ctx.update.update_id}:`); const e = err.error;
    if (e instanceof GrammyError) {
     console.error('Error in request:', e.description);
    } else if (e instanceof HttpError) { console.error('Could not contact Telegram:', e);
    } else {
    console.error('Unknown error:', e);
    }
    });

bot.start();

bot.hears(/–Ω–µ—Ç/, async (ctx) => {
    await ctx.reply(
     "–ø–∏.. —á—Ç–æ?? –Ω–∞ –Ω–µ—Ç –∏ —Å—É–¥–∞ –Ω–µ—Ç!",
    );
   });

bot.hears(/–¥–∞/, async (ctx) => {
await ctx.reply(
"–ø–∏.. —á—Ç–æ?? –¥–æ—Ä–∞-–¥—É—Ä–∞ –æ—Ç–≤–µ—Ç!",
);
});

bot.api.setMyCommands([
    { command: 'start', description: '–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞' },
    { command: 'say_hello', description: '–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ' },
    { command: 'hello', description: '–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ' },
    { command: 'give_sex', description: '–ü–æ–ª—É—á–∏—Ç—å –ø–∏–∑–¥—ã' },
    ]);

bot.command('start', async (ctx) => {
 await ctx.reply(
  '–ü—Ä–∏–≤–µ—Ç! –Ø - –ë–æ—Ç ü§ñ',
 );
});

bot.command('give_sex', async (ctx) => {
    await ctx.reply(
     `${ctx.from.first_name}, —Ç—ã —á—Ç–æ –æ—Ö—É–µ–ª?`,
    );
   });

bot.command('help', async (ctx) => {
    await ctx.reply(
     '–Ω–µ',
    );
   });
   
bot.on("message", async (ctx) => {
 await ctx.reply('–ù–µ –≤—ã–¥—É–º—ã–≤–∞–π');
});




